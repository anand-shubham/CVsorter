'INSTITUTES1','YEARS1',
'INSTITUTES2','YEARS2',
'INSTITUTES3','YEARS3',
'INSTITUTES4','YEARS4',
'INSTITUTES5','YEARS5',

writeString5 = str(infoDict['%sinstitute'%'c\\.?a'])
writeString6 = str(infoDict['%syear'%'c\\.?a'])
writeString7 = str(infoDict['%sinstitute'%'b\\.?com'])
writeString8 = str(infoDict['%syear'%'b\\.?com'])
writeString9 = str(infoDict['%sinstitute'%'icwa'])
writeString10 =str(infoDict['%syear'%'icwa'])
writeString11 = str(infoDict['%sinstitute'%'m\\.?com'])
writeString12 =str(infoDict['%syear'%'m\\.?com'])
writeString13 = str(infoDict['%sinstitute'%'mba'])
writeString14 =str(infoDict['%syear'%'mba'])


def getQualification(self,inputString,infoDict,D1,D2):
    #key=list(qualification.keys())
    qualification={'institute':'','year':''}
    nameofinstitutes=open('nameofinstitutes.txt','r').read().lower()#open file which contains keywords like institutes,university usually  fond in institute names
    nameofinstitues=set(nameofinstitutes.split())
    instiregex=r'INSTI: {<DT.>?<NNP.*>+<IN.*>?<NNP.*>?}'
    chunkParser = nltk.RegexpParser(instiregex)


    try:
        index=[]
        line=[]#saves all the lines where it finds the word of that education
        for ind, sentence in enumerate(self.lines):#find the index of the sentence where the degree is find and then analyse that sentence
            sen=" ".join([words[0].lower() for words in sentence]) #string of words
            if re.search(D1,sen) or re.search(D2,sen):
                index.append(ind)  #list of all indexes where word Ca lies
        if index:#only finds for Ca rank and CA year if it finds the word Ca in the document

            for indextocheck in index:#checks all nearby lines where it founds the degree word.ex-'CA'
                for i in [indextocheck,indextocheck+1]: #checks the line with the keyword and just the next line to it
                    try:
                        try:
                            wordstr=" ".join(words[0] for words in self.lines[i])#string of that particular line
                        except:
                            wordstr=""
                        #if re.search(r'\D\d{1,3}\D',wordstr.lower()) and qualification['rank']=='':
                                #qualification['rank']=re.findall(r'\D\d{1,3}\D',wordstr.lower())
                                #line.append(wordstr)
                        if re.search(r'\b[21][09][8901][0-9]',wordstr.lower()) and qualification['year']=='':
                                qualification['year']=re.findall(r'\b[21][09][8901][0-9]',wordstr.lower())
                                line.append(wordstr)
                        chunked_line = chunkParser.parse(self.lines[i])#regex chunk for searching univ name
                        for subtree in chunked_line.subtrees():
                                if subtree.label()=='INSTI':
                                    for ind,leaves in enumerate(subtree):
                                        if leaves[0].lower() in nameofinstitutes and leaves[1]=='NNP' and qualification['institute']=='':
                                            qualification['institute']=' '.join([words[0]for words in subtree.leaves()])
                                            line.append(wordstr)

                    except Exception as e:
                        print (traceback.format_exc())

        if D1=='c\.?a':
            infoDict['%sinstitute'%D1] ="I.C.A.I"
        else:
            if qualification['institute']:
                infoDict['%sinstitute'%D1] = str(qualification['institute'])
            else:
                infoDict['%sinstitute'%D1] = "NULL"
        if qualification['year']:
            infoDict['%syear'%D1] = int(qualification['year'][0])
        else:
            infoDict['%syear'%D1] =0
        infoDict['%sline'%D1]=list(set(line))
    except Exception as e:
        print (traceback.format_exc())
        print (e)


def Qualification(self,inputString,infoDict,debug=False):
    degre=[]
    #Q={'CAinformation':'','ICWAinformation':'','B.Cominformation':'','M.Cominformation':'','MBAinformation':''}
    #degree=[]
    #degree1=open('degree.txt','r').read().lower()#string to read from the txt file which contains all the degrees
    #degree=set(el for el in degree1.split('\n'))#saves all the degrees seperated by new lines,degree name contains both abbreviation and full names check file
    #qualification1={'CAline':'','CAcollege':'','CArank':'','CAyear':''}
    self.getQualification(self.inputString,infoDict,'c\.?a','chartered accountant')
    if infoDict['%sline'%'c\.?a']:
     degre.append('ca')
    self.getQualification(self.inputString,infoDict,'icwa','icwa')
    if infoDict['%sline'%'icwa']:
     degre.append('icwa')
    self.getQualification(self.inputString,infoDict,'b\.?com','bachelor of commerce')
    if infoDict['%sline'%'b\.?com']:
     degre.append('b.com')
    self.getQualification(self.inputString,infoDict,'m\.?com','masters of commerce')
    if infoDict['%sline'%'m\.?com']:
     degre.append('m.com')
    self.getQualification(self.inputString,infoDict,'mba','mba')
    if infoDict['%sline'%'mba']:
     degre.append('mba')
    if degre:
        infoDict['degree'] = degre
    else:
        infoDict['degree'] = "NONE"
    if debug:
        print ("\n", pprint(infoDict), "\n")
        code.interact(local=locals())
    return infoDict['degree']
